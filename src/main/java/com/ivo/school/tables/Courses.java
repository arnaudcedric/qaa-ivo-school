/**
 * This class is generated by jOOQ
 */
package com.ivo.school.tables;


import com.ivo.school.Keys;
import com.ivo.school.Mydb;
import com.ivo.school.tables.records.CoursesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Courses extends TableImpl<CoursesRecord> {

    private static final long serialVersionUID = -1167846970;

    /**
     * The reference instance of <code>mydb.courses</code>
     */
    public static final Courses COURSES = new Courses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoursesRecord> getRecordType() {
        return CoursesRecord.class;
    }

    /**
     * The column <code>mydb.courses.id</code>.
     */
    public final TableField<CoursesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mydb.courses.class_id</code>.
     */
    public final TableField<CoursesRecord, Integer> CLASS_ID = createField("class_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mydb.courses.subject_id</code>.
     */
    public final TableField<CoursesRecord, Integer> SUBJECT_ID = createField("subject_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mydb.courses.about</code>.
     */
    public final TableField<CoursesRecord, String> ABOUT = createField("about", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "");

    /**
     * The column <code>mydb.courses.createdAt</code>.
     */
    public final TableField<CoursesRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mydb.courses.updatedAt</code>.
     */
    public final TableField<CoursesRecord, Timestamp> UPDATEDAT = createField("updatedAt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mydb.courses.code</code>.
     */
    public final TableField<CoursesRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(12).nullable(false).defaultValue(org.jooq.impl.DSL.inline("CODE", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mydb.courses.grade_points</code>.
     */
    public final TableField<CoursesRecord, Integer> GRADE_POINTS = createField("grade_points", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mydb.courses.is_mandatory</code>.
     */
    public final TableField<CoursesRecord, Byte> IS_MANDATORY = createField("is_mandatory", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>mydb.courses</code> table reference
     */
    public Courses() {
        this("courses", null);
    }

    /**
     * Create an aliased <code>mydb.courses</code> table reference
     */
    public Courses(String alias) {
        this(alias, COURSES);
    }

    private Courses(String alias, Table<CoursesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Courses(String alias, Table<CoursesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mydb.MYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CoursesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COURSES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CoursesRecord> getPrimaryKey() {
        return Keys.KEY_COURSES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CoursesRecord>> getKeys() {
        return Arrays.<UniqueKey<CoursesRecord>>asList(Keys.KEY_COURSES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CoursesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CoursesRecord, ?>>asList(Keys.FK_CLASS_HAS_SUBJECT_CLASS2, Keys.FK_CLASS_HAS_SUBJECT_SUBJECT2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Courses as(String alias) {
        return new Courses(alias, this);
    }

    /**
     * Rename this table
     */
    public Courses rename(String name) {
        return new Courses(name, null);
    }
}
