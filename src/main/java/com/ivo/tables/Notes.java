/**
 * This class is generated by jOOQ
 */
package com.ivo.tables;


import com.ivo.Ivoschool;
import com.ivo.Keys;
import com.ivo.tables.records.NotesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notes extends TableImpl<NotesRecord> {

    private static final long serialVersionUID = 1341703272;

    /**
     * The reference instance of <code>ivoschool.notes</code>
     */
    public static final Notes NOTES = new Notes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotesRecord> getRecordType() {
        return NotesRecord.class;
    }

    /**
     * The column <code>ivoschool.notes.id</code>.
     */
    public final TableField<NotesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ivoschool.notes.note_url</code>.
     */
    public final TableField<NotesRecord, String> NOTE_URL = createField("note_url", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * The column <code>ivoschool.notes.lecturer_id</code>.
     */
    public final TableField<NotesRecord, Integer> LECTURER_ID = createField("lecturer_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ivoschool.notes.name</code>.
     */
    public final TableField<NotesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>ivoschool.notes.rating</code>.
     */
    public final TableField<NotesRecord, Integer> RATING = createField("rating", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ivoschool.notes.createdAt</code>.
     */
    public final TableField<NotesRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ivoschool.notes.updatedAt</code>.
     */
    public final TableField<NotesRecord, Timestamp> UPDATEDAT = createField("updatedAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ivoschool.notes.about</code>.
     */
    public final TableField<NotesRecord, String> ABOUT = createField("about", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>ivoschool.notes</code> table reference
     */
    public Notes() {
        this("notes", null);
    }

    /**
     * Create an aliased <code>ivoschool.notes</code> table reference
     */
    public Notes(String alias) {
        this(alias, NOTES);
    }

    private Notes(String alias, Table<NotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notes(String alias, Table<NotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ivoschool.IVOSCHOOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<NotesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_NOTES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NotesRecord> getPrimaryKey() {
        return Keys.KEY_NOTES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NotesRecord>> getKeys() {
        return Arrays.<UniqueKey<NotesRecord>>asList(Keys.KEY_NOTES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NotesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotesRecord, ?>>asList(Keys.FK_NOTES_LECTURERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Notes as(String alias) {
        return new Notes(alias, this);
    }

    /**
     * Rename this table
     */
    public Notes rename(String name) {
        return new Notes(name, null);
    }
}
